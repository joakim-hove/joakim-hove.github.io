The data types available in ERT
===============================

Very briefly described the purpose of ERT is to pass uncertain paramater values
to a simulator [#]_, in a form which works as suitable input to the simulator and
then subsequently load the results from the simulator. This means that data must
be formatted in a form which the simulator can load, and also that ERT must be
able to read files generated by the simulator.

The data managed by ERT are organized in different *data types* described in
this chapter. Configuring the data used in the conditioning project is a very
important part of setting up a ERT configuration file - in practical terms this
is how you configure which uncertainty parameters should be studied. The data
types in ert can be categorized in two ways:

1. How the data type behaves dynamically: is it a static parameter like porosity
   or a relperm parameter - i.e. does it serve as *input* to the simulator, or
   is it a quantity which is generated as a result from the simulation. When
   understanding the model updating algorithm and process it is important to
   understand this difference properly.

2. How the data type is implemented, what type of files does it and read write,
   how is it configured and so on.

NB: All datatypes have a common namespace; i.e. a globally unique keyword.


.. [#] *Simulator* should in this context be understood as the complete
       forward model, including various pre and post processing steps in
       addition to the actual reservoir simulation.


Parameters
----------

The *parameter* datatypes will serve as input to the reservoir simulator. For a
pure uncertainty study they will pass right through, model updating update
parameters. Sample internally or load externally.



Scalar parameters with a template: GEN_KW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The GEN_KW datatype is used in situations where you have a handful of related
[#]_ parameters. The intention behind the GEN_KW implementation is that ERT will
*sample* parameters randomly according to a distribution specified by the user,
then ERT will use the sampled values and a template file provided by the user to
generate a file which can be used by the simulator. 

.. [#] ERT itself can not impose correlations among the parameters, if you need
       that you must implement it yourself in the forward model.

In the main config file a GEN_KW instance is defined as follows:

::

		GEN_KW  ID  templates/template.txt  include.txt  priors.txt

Here ID is an (arbitrary) unique string, :code:`templates/template.txt` is the
name of a template file, :code:`include.txt` is the name of the file which is
made for each member based on the template file :code:`templates/template.txt`
and the prior distribution :code:`priors.txt` is a file containing a list of
parametrized keywords and a prior distribution for each. Note that you must
manually edit the input files of the simulator to ensure that the generated file
:code:`include.txt` is included.

Let us consider an example where the GEN_KW parameter type is used to estimate
pore volume multipliers in an Eclipse model. We could then declare a GEN_KW
instance in the main enkf configuration file:

	::

		GEN_KW PAR_MULTPV multpv_template.txt multpv.txt multpv_priors.txt

	In the GRID or EDIT section of the ECLIPSE data file, we would
	insert the following include statement:

	::

		INCLUDE
		 'multpv.txt' /

	The template file multpv_template.txt would contain some
	parametrized ECLIPSE statements:

	::

		BOX
		 1 10 1 30 13 13 /
		MULTPV
		 300*<MULTPV_BOX1> /
		ENDBOX
	
		BOX
		 1 10 1 30 14 14 /
		MULTPV
		 300*<MULTPV_BOX2> /
		ENDBOX

	Here, <MULTPV_BOX1> and <MULTPV_BOX2> will act as magic
	strings. Note that the '<' '>' must be present around the
	magic strings. In this case, the parameter configuration file
	multpv_priors.txt could look like this:

	::

		MULTPV_BOX2 UNIFORM 0.98 1.03
		MULTPV_BOX1 UNIFORM 0.85 1.00

	In general, the first keyword on each line in the parameter
	configuration file defines a key, which when found in the
	template file enclosed in '<' and '>', is replaced with a
	value. The rest of the line defines a prior distribution for
	the key. See Prior distributions available in enkf for a list
	of available prior distributions.
	
	**Example: Using GEN_KW to estimate fault transmissibility multipliers**

	Previously enkf supported a datatype MULTFLT for estimating
	fault transmissibility multipliers. This has now been
	depreceated, as the functionality can be easily achieved with
	the help of GEN_KW. In th enkf config file:

	::

		GEN_KW  MY-FAULTS   MULTFLT.tmpl   MULTFLT.INC   MULTFLT.txt

	Here MY-FAULTS is the (arbitrary) key assigned to the fault
	multiplers, MULTFLT.tmpl is the template file, which can look
	like this:

	::

		MULTFLT
		 'FAULT1'   <FAULT1>  /
		 'FAULT2'   <FAULT2>  /
		/

	and finally the initial distribution of the parameters FAULT1
	and FAULT2 are defined in the file MULTFLT.txt:

	::

		FAULT1   LOGUNIF   0.00001   0.1
		FAULT2   UNIFORM   0.00      1.0

        The various prior distributions available for the ``GEN_KW``
        keyword are here :ref:`prior distributions available in ERT <prior_distributions>`

                
	Loading GEN_KW values from an external file

	The default use of the GEN_KW keyword is to let the ERT
	application sample random values for the elements in the
	GEN_KW instance, but it is also possible to tell ERT to load a
	precreated set of data files, this can for instance be used as
	a component in a experimental design based workflow. When
	using external files to initialize the GEN_KW instances you
	supply an extra keyword ``INIT_FILE:/path/to/priors/files%d``
	which tells where the prior files are:

	::

		GEN_KW  MY-FAULTS   MULTFLT.tmpl   MULTFLT.INC   MULTFLT.txt    INIT_FILES:priors/multflt/faults%d

	In the example above you must prepare files
	priors/multflt/faults0, priors/multflt/faults1,
	... priors/multflt/faultsn which ert will load when you
	initialize the case. The format of the GEN_KW input files can
	be of two varieties:

	1. The files can be plain ASCII text files with a list of numbers:

	::

		1.25
		2.67

	The numbers will be assigned to parameters in the order found in the MULTFLT.txt file.
	
	2. Alternatively values and keywords can be interleaved as in:

	::

		FAULT1 1.25
		FAULT2 2.56

	in this case the ordering can differ in the init files and the parameter file.
	
	The heritage of the ERT program is based on the EnKF algorithm, and the EnKF algorithm evolves around Gaussian variables - internally the GEN_KW variables are assumed to be samples from the N(0,1) distribution, and the distributions specified in the parameters file are based on transformations starting with a N(0,1) distributed variable. The slightly awkward consequence of this is that to let your sampled values pass through ERT unmodified you must configure the distribution NORMAL 0 1 in the parameter file; alternatively if you do not intend to update the GEN_KW variable you can use the distribution RAW.



3D field parameters: FIELD
~~~~~~~~~~~~~~~~~~~~~~~~~~

2D Surface parameters: SURFACE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

General vector parameters: GEN_PARAM
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



Simulated data
--------------

Summary: SUMMARY
~~~~~~~~~~~~~~~~


General data: GEN_DATA
~~~~~~~~~~~~~~~~~~~~~~


Keyword results: CUSTOM_KW
~~~~~~~~~~~~~~~~~~~~~~~~~~


EnKF heritage
-------------

With regards to the datatypes in ERT this is a part of the application where the
EnKF heritage shows through quite clearly, the datetypes offered by ERT would
probably be different if ERT was made for Ensemble Smoother from the outset.
Pecularites of EnKF heritage include:

1. The `FIELD` implementation can behave both as a dynamic quantity, i.e.
   pressure and saturation, and static property like porosity. In ERT it is
   currently *only used* as a parameter.

2. The parameter types have an internal pseudo time dependence corresponding to
   the "update time" induced by the EnKF scheme. This pseudo time dependence is
   not directly exposed to the user, but it is still part of the implementation
   and e.g. when writing plugins which work with parameter data managed by ERT
   you must relate to it.

3. The time dependence of the `GEN_DATA` implementation. This is just too
   complex, there have been numerous problems with people who configure the
   `GEN_DATA` keywords incorrectly.  


Observations
------------

  
